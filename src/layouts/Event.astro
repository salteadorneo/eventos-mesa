---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import Header from "../components/Header.astro";
import Layout from "./Layout.astro";

type Props = CollectionEntry<"event">["data"];

const { title, start, end, updatedDate, image, location, color } = Astro.props;

const API_KEY = "AIzaSyAsvWUikM_4YkcsTWBjWMPFK6-jXe7iVAs";
---

<Layout>
    <Header />
    <main>
        <article>
            <div
                class="relative flex items-end py-6 min-h-[40dvh] bg-center bg-cover bg-no-repeat"
                style={`background-image: url(${image})`}
            >
                <div
                    class={`absolute inset-0 ${image && "bg-black! opacity-30"}`}
                    style={`background-color: ${color};`}
                >
                </div>
                <div class="container mx-auto px-4">
                    <div
                        class="text-xl text-white drop-shadow-[0_1px_4px_rgba(0,0,0,0.8)]"
                    >
                        <FormattedDate date={start} />
                        {
                            end && (
                                <>
                                    al <FormattedDate date={end} />
                                </>
                            )
                        }
                        {
                            updatedDate && (
                                <div class="last-updated-on">
                                    Last updated on{" "}
                                    <FormattedDate date={updatedDate} />
                                </div>
                            )
                        }
                    </div>
                    <h1
                        class="text-5xl md:text-6xl text-balance text-white drop-shadow-[0_1px_4px_rgba(0,0,0,0.8)]"
                    >
                        {title}
                    </h1>
                </div>
            </div>
            <div class="container mx-auto py-8 px-4 space-y-4">
                <slot />
            </div>
            {
                location && (
                    <iframe
                        width="100%"
                        class="h-96"
                        loading="lazy"
                        allowfullscreen
                        referrerpolicy="no-referrer-when-downgrade"
                        src={`https://www.google.com/maps/embed/v1/place?key=${API_KEY}&q=${encodeURIComponent(location)}`}
                    />
                )
            }
        </article>
    </main>
    <Footer />
</Layout>

<style is:inline define:vars={{ color }}>
    a {
        color: var(--color, --color-primary)
        text-decoration: underline;
    }
</style>
