---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { slugify } from "@/utils";
import List from "@/components/List.astro";
import Filter from "@/components/Filter.astro";
import Title from "@/components/Title.astro";
import Calendar from "@/components/Calendar.astro";

export async function getStaticPaths() {
    const provinces = [
        "Álava",
        "Albacete",
        "Alicante",
        "Almería",
        "Asturias",
        "Ávila",
        "Badajoz",
        "Baleares",
        "Barcelona",
        "Burgos",
        "Cáceres",
        "Cádiz",
        "Cantabria",
        "Castellón",
        "Ciudad Real",
        "Córdoba",
        "Cuenca",
        "Girona",
        "Granada",
        "Guadalajara",
        "Guipúzcoa",
        "Huelva",
        "Huesca",
        "Jaén",
        "A Coruña",
        "La Rioja",
        "Las Palmas",
        "León",
        "Lleida",
        "Lugo",
        "Madrid",
        "Málaga",
        "Murcia",
        "Navarra",
        "Orense",
        "Palencia",
        "Pontevedra",
        "Salamanca",
        "Santa Cruz de Tenerife",
        "Segovia",
        "Sevilla",
        "Soria",
        "Tarragona",
        "Teruel",
        "Toledo",
        "Valencia",
        "Valladolid",
        "Bizkaia",
        "Zamora",
        "Zaragoza",
        "Ceuta",
        "Melilla",
    ];
    return Array.from(provinces).map((province) => ({
        params: { province: slugify(province) },
        props: { province },
    }));
}

const { province } = Astro.props;

const events = await getCollection(
    "event",
    ({ data }) =>
        data.province && Astro.params.province.match(slugify(data.province)),
);

const future = events
    .filter((event) => event.data.start > new Date())
    .sort((a, b) => a.data.start.getTime() - b.data.start.getTime());
const past = events
    .filter((event) => event.data.start <= new Date())
    .sort((a, b) => b.data.start.getTime() - a.data.start.getTime());
---

<Layout
    title={`Eventos en ${province}`}
    description={`Listado de eventos de juegos de mesa en ${province}.`}
>
    <Header />
    <main class="flex-1 mb-6">
        <Title title={`Eventos en ${province}`}>
            <Filter />
        </Title>
        <section
            class="w-full max-w-6xl mx-auto px-4 flex flex-col lg:flex-row lg:items-start gap-8"
        >
            <section class="flex-1 py-6">
                <h2 class="text-3xl mb-4">
                    Próximos eventos en {province}
                </h2>
                {
                    future.length === 0 && (
                        <p class="text-gray-500">
                            No hay eventos próximos en {province}.
                        </p>
                    )
                }
                <List events={future} />

                <h2 class="text-3xl mb-4 mt-12">
                    Eventos pasados en {province}
                </h2>
                {
                    past.length === 0 && (
                        <p class="text-gray-500">
                            No hay eventos pasados en {province}.
                        </p>
                    )
                }
                <List events={past} />
            </section>
            <section>
                <Calendar events={events} className="lg:w-[400px] h-[500px]!" />
            </section>
        </section>
    </main>
    <Footer />
</Layout>
