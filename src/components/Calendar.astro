---
const { events } = Astro.props;
---

<div id="calendar" class="my-6 h-[150dvh] md:h-[90dvh]"></div>
<style is:inline>
    .event:hover {
        opacity: 0.8;
    }

    .fc .fc-toolbar-title {
        @media (width < 480px) {
            font-size: 1.2rem;
            white-space: nowrap;
        }
    }
</style>
<script src="/lib/fullcalendar.min.js" is:inline></script>
<script is:inline define:vars={{ events }}>
    document.addEventListener("DOMContentLoaded", function () {
        // guardar en localstorage el mes y año que se está mostrando
        const savedDate = localStorage.getItem("calendarDate");
        let initialDate = savedDate ? new Date(savedDate) : new Date();

        var calendarEl = document.getElementById("calendar");
        var calendar = new FullCalendar.Calendar(calendarEl, {
            firstDay: 1,
            locale: "es",
            showNonCurrentDates: false,
            initialDate,
            events: events.map((event) => {
                const data = {
                    id: event.id,
                    title: event.data.title,
                    url: `/evento/${event.id}`,
                    image: event.data.image,
                    color: event.data.color,
                };

                // Check if it's a recurring event
                if (event.data.daysOfWeek && event.data.daysOfWeek.length > 0) {
                    // Recurring event
                    data.daysOfWeek = event.data.daysOfWeek;
                    // data.startTime = event.data.startTime || "00:00";
                    // data.endTime = event.data.endTime || "23:59";
                    data.startRecur = event.data.startRecur;
                    data.endRecur = event.data.endRecur;
                    data.allDay = true; //!event.data.startTime; // If no startTime, it's all day
                    data.classNames = ["event recurring-event"]; // Different style for recurring events
                } else {
                    // Regular event
                    data.start = event.data.start;
                    // For all-day events, end date should be the day after the last day
                    if (event.data.end) {
                        const endDate = new Date(event.data.end);
                        endDate.setDate(endDate.getDate() + 1);
                        data.end = endDate.toISOString().split("T")[0];
                    }
                    data.allDay = true;
                    data.classNames = ["event"]; // Normal event style
                }

                return data;
            }),
        });
        calendar.render();

        document.querySelectorAll(".fc-button-primary").forEach((button) => {
            button.addEventListener("click", function () {
                const currentDate = calendar.getDate();
                localStorage.setItem("calendarDate", currentDate.toISOString());
            });
        });
    });
</script>
